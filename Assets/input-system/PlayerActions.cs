//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/input-system/player-controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace LiftHospital
{
    public partial class @PlayerActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""player-controls"",
    ""maps"": [
        {
            ""name"": ""normal-controls"",
            ""id"": ""873deadc-ecb0-411e-bd5d-6a42652b6d1e"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""2c875ecf-a8c1-42f2-bdbf-57ffe59cfa4e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""945b93d5-5b0b-4d57-9656-5e1bc00a070a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pick"",
                    ""type"": ""Button"",
                    ""id"": ""30bcb2e9-52b7-4997-bce7-c608d0449443"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""62ad5e0a-d752-4f12-ab34-d7d8cf757693"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5ab5a59f-2496-43d1-bd80-cb5a8979f9c3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3934fddf-52e4-4136-a373-b1f5e49935ef"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c5c0d3af-df2b-411e-a653-5912ab76deb9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a9a405a1-717e-485e-8f1a-9d0fbf789d38"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7531a3ec-b19d-4b6c-a9dc-305db4a757aa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef3a510d-e2e4-4934-83e0-4e90b73381d2"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // normal-controls
            m_normalcontrols = asset.FindActionMap("normal-controls", throwIfNotFound: true);
            m_normalcontrols_move = m_normalcontrols.FindAction("move", throwIfNotFound: true);
            m_normalcontrols_jump = m_normalcontrols.FindAction("jump", throwIfNotFound: true);
            m_normalcontrols_pick = m_normalcontrols.FindAction("pick", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // normal-controls
        private readonly InputActionMap m_normalcontrols;
        private List<INormalcontrolsActions> m_NormalcontrolsActionsCallbackInterfaces = new List<INormalcontrolsActions>();
        private readonly InputAction m_normalcontrols_move;
        private readonly InputAction m_normalcontrols_jump;
        private readonly InputAction m_normalcontrols_pick;
        public struct NormalcontrolsActions
        {
            private @PlayerActions m_Wrapper;
            public NormalcontrolsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @move => m_Wrapper.m_normalcontrols_move;
            public InputAction @jump => m_Wrapper.m_normalcontrols_jump;
            public InputAction @pick => m_Wrapper.m_normalcontrols_pick;
            public InputActionMap Get() { return m_Wrapper.m_normalcontrols; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(NormalcontrolsActions set) { return set.Get(); }
            public void AddCallbacks(INormalcontrolsActions instance)
            {
                if (instance == null || m_Wrapper.m_NormalcontrolsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_NormalcontrolsActionsCallbackInterfaces.Add(instance);
                @move.started += instance.OnMove;
                @move.performed += instance.OnMove;
                @move.canceled += instance.OnMove;
                @jump.started += instance.OnJump;
                @jump.performed += instance.OnJump;
                @jump.canceled += instance.OnJump;
                @pick.started += instance.OnPick;
                @pick.performed += instance.OnPick;
                @pick.canceled += instance.OnPick;
            }

            private void UnregisterCallbacks(INormalcontrolsActions instance)
            {
                @move.started -= instance.OnMove;
                @move.performed -= instance.OnMove;
                @move.canceled -= instance.OnMove;
                @jump.started -= instance.OnJump;
                @jump.performed -= instance.OnJump;
                @jump.canceled -= instance.OnJump;
                @pick.started -= instance.OnPick;
                @pick.performed -= instance.OnPick;
                @pick.canceled -= instance.OnPick;
            }

            public void RemoveCallbacks(INormalcontrolsActions instance)
            {
                if (m_Wrapper.m_NormalcontrolsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(INormalcontrolsActions instance)
            {
                foreach (var item in m_Wrapper.m_NormalcontrolsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_NormalcontrolsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public NormalcontrolsActions @normalcontrols => new NormalcontrolsActions(this);
        public interface INormalcontrolsActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnPick(InputAction.CallbackContext context);
        }
    }
}
